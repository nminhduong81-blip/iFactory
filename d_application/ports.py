from __future__ import annotations
from typing import Protocol, Optional, List, runtime_checkable
from datetime import datetime
from d_application.dto import StatusEvent, InputEvent, StatusSnapshot, InputSnapshot

@runtime_checkable
class StatusSnapshotRepoPort(Protocol):
    async def initialize(self) -> None: ...
    async def upsert_many(self, items: List[StatusSnapshot]) -> int: ...
    async def fetch_all(self, codes: Optional[List[str]] = None) -> List[StatusSnapshot]: ...

@runtime_checkable
class InputSnapshotRepoPort(Protocol):
    async def initialize(self) -> None: ...
    async def upsert_many(self, items: List[InputSnapshot]) -> int: ...
    async def fetch_all(self, codes: Optional[List[str]] = None) -> List[InputSnapshot]: ...

@runtime_checkable
class StatusHistoryRepoPort(Protocol):
    async def initialize(self) -> None: ...
    async def insert_events(self, events: List[StatusEvent]) -> int: ...
    async def query_period(self, code: str, start: datetime, end: datetime) -> List[StatusEvent]: ...

@runtime_checkable
class InputHistoryRepoPort(Protocol):
    async def initialize(self) -> None: ...
    async def insert_events(self, events: List[InputEvent]) -> int: ...
    async def query_period(self, code: str, start: datetime, end: datetime) -> List[InputEvent]: ...

@runtime_checkable
class StatusPeriodRepoPort(Protocol):
    async def initialize(self) -> None: ...
    async def insert_events(self, events: List[StatusEvent]) -> int: ...
    async def query_period(self, codes: List[str], start: datetime, end: datetime) -> List[StatusEvent]: ...

@runtime_checkable
class InputPeriodRepoPort(Protocol):
    async def initialize(self) -> None: ...
    async def insert_events(self, events: List[InputEvent]) -> int: ...
    async def query_period(self, codes: List[str], start: datetime, end: datetime) -> List[InputEvent]: ...

@runtime_checkable
class SyncMetaRepoPort(Protocol):
    async def initialize(self) -> None: ...
    async def get_last_synced(self, table_name: str) -> Optional[datetime]: ...
    async def set_last_synced(self, table_name: str, ts: datetime) -> None: ...